{"ast":null,"code":"import createMask from './factory.js';\nimport IMask from '../core/holder.js';\nimport '../core/utils.js';\nimport '../core/change-details.js';\n/** Mask pipe source and destination types */\n\nconst PIPE_TYPE = {\n  MASKED: 'value',\n  UNMASKED: 'unmaskedValue',\n  TYPED: 'typedValue'\n};\n/** Creates new pipe function depending on mask type, source and destination options */\n\nfunction createPipe(mask) {\n  let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;\n  let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;\n  const masked = createMask(mask);\n  return value => masked.runIsolated(m => {\n    m[from] = value;\n    return m[to];\n  });\n}\n/** Pipes value through mask depending on mask type, source and destination options */\n\n\nfunction pipe(value) {\n  for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    pipeArgs[_key - 1] = arguments[_key];\n  }\n\n  return createPipe(...pipeArgs)(value);\n}\n\nIMask.PIPE_TYPE = PIPE_TYPE;\nIMask.createPipe = createPipe;\nIMask.pipe = pipe;\nexport { PIPE_TYPE, createPipe, pipe };","map":{"version":3,"names":["createMask","IMask","PIPE_TYPE","MASKED","UNMASKED","TYPED","createPipe","mask","from","arguments","length","undefined","to","masked","value","runIsolated","m","pipe","_len","pipeArgs","Array","_key"],"sources":["D:/React/PedidoOnline/node_modules/imask/esm/masked/pipe.js"],"sourcesContent":["import createMask from './factory.js';\nimport IMask from '../core/holder.js';\nimport '../core/utils.js';\nimport '../core/change-details.js';\n\n/** Mask pipe source and destination types */\nconst PIPE_TYPE = {\n  MASKED: 'value',\n  UNMASKED: 'unmaskedValue',\n  TYPED: 'typedValue'\n};\n\n/** Creates new pipe function depending on mask type, source and destination options */\nfunction createPipe(mask) {\n  let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIPE_TYPE.MASKED;\n  let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PIPE_TYPE.MASKED;\n  const masked = createMask(mask);\n  return value => masked.runIsolated(m => {\n    m[from] = value;\n    return m[to];\n  });\n}\n\n/** Pipes value through mask depending on mask type, source and destination options */\nfunction pipe(value) {\n  for (var _len = arguments.length, pipeArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    pipeArgs[_key - 1] = arguments[_key];\n  }\n  return createPipe(...pipeArgs)(value);\n}\nIMask.PIPE_TYPE = PIPE_TYPE;\nIMask.createPipe = createPipe;\nIMask.pipe = pipe;\n\nexport { PIPE_TYPE, createPipe, pipe };\n"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,kBAAP;AACA,OAAO,2BAAP;AAEA;;AACA,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE,OADQ;EAEhBC,QAAQ,EAAE,eAFM;EAGhBC,KAAK,EAAE;AAHS,CAAlB;AAMA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;EACxB,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEP,SAAS,CAACC,MAAzF;EACA,IAAIS,EAAE,GAAGH,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoEP,SAAS,CAACC,MAAvF;EACA,MAAMU,MAAM,GAAGb,UAAU,CAACO,IAAD,CAAzB;EACA,OAAOO,KAAK,IAAID,MAAM,CAACE,WAAP,CAAmBC,CAAC,IAAI;IACtCA,CAAC,CAACR,IAAD,CAAD,GAAUM,KAAV;IACA,OAAOE,CAAC,CAACJ,EAAD,CAAR;EACD,CAHe,CAAhB;AAID;AAED;;;AACA,SAASK,IAAT,CAAcH,KAAd,EAAqB;EACnB,KAAK,IAAII,IAAI,GAAGT,SAAS,CAACC,MAArB,EAA6BS,QAAQ,GAAG,IAAIC,KAAJ,CAAUF,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAAxC,EAA4EG,IAAI,GAAG,CAAxF,EAA2FA,IAAI,GAAGH,IAAlG,EAAwGG,IAAI,EAA5G,EAAgH;IAC9GF,QAAQ,CAACE,IAAI,GAAG,CAAR,CAAR,GAAqBZ,SAAS,CAACY,IAAD,CAA9B;EACD;;EACD,OAAOf,UAAU,CAAC,GAAGa,QAAJ,CAAV,CAAwBL,KAAxB,CAAP;AACD;;AACDb,KAAK,CAACC,SAAN,GAAkBA,SAAlB;AACAD,KAAK,CAACK,UAAN,GAAmBA,UAAnB;AACAL,KAAK,CAACgB,IAAN,GAAaA,IAAb;AAEA,SAASf,SAAT,EAAoBI,UAApB,EAAgCW,IAAhC"},"metadata":{},"sourceType":"module"}