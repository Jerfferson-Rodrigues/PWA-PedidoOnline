{"ast":null,"code":"import { isValidCNPJ, isValidCPF, isValidPhone } from '@brazilian-utils/brazilian-utils';\nimport { default as isValidCreditCard } from 'card-validator';\nimport * as yup from 'yup';\nexport const schema = yup.object({\n  fullName: yup.string().required('O nome é obrigatório.').min(3, 'O nome deve ser completo.').matches(/(\\w.+\\s).+/gi, 'O nome deve conter o sobrenome.'),\n  email: yup.string().required('O email é obrigatório.').email('O email deve ser válido.'),\n  mobile: yup.string().required('O celular é obrigatório.').transform(value => value.replace(/[^\\d]/g, '')).test('validateMobile', 'O celular inválido.', value => isValidPhone(value)),\n  document: yup.string().required('O CPF/CNPJ é obrigatório.').transform(value => value.replace(/[^\\d]/g, '')).test('validateDocument', 'O CPF/CNPJ é inválido.', value => isValidCPF(value) || isValidCNPJ(value)),\n  zipCode: yup.string().required('O CEP é obrigatório.').transform(val => val.replace(/[^\\d]+/g, '')),\n  street: yup.string().required('O endereço é obrigatório.'),\n  number: yup.string().required('O número é obrigatório.'),\n  complement: yup.string(),\n  neighborhood: yup.string().required('O bairro é obrigatório.'),\n  city: yup.string().required('A cidade é obrigatória.'),\n  state: yup.string().required('O estado é obrigatório.'),\n  creditCardNumber: yup.string().required('O número do cartão é obrigatório.').transform(val => val.replace(/[^\\d]+/g, '')).test('validatCreditCardNumber', 'O número do cartão é inválido.', value => isValidCreditCard.number(value).isValid),\n  creditCardHolder: yup.string().required('O nome do titular é obrigatório.').min(3, 'O nome do titular deve ser completo.').matches(/(\\w.+\\s).+/gi, 'O nome do titular deve conter o sobrenome.'),\n  creditCardExpiration: yup.string().required('A data de validação é obrigatória.').transform(value => {\n    const [month, year] = value.split('/');\n    if (month && year && month.length === 2 && year.length === 2) return new Date(+`20${year}`, +month - 1, 1).toISOString();\n    return value;\n  }).test('validateCreditCardExpiration', 'A data de validate é inválida.', value => new Date(value) >= new Date()),\n  creditCardSecurityCode: yup.string().required('O CVV é obrigatório.').transform(value => value.replace(/[^\\d]+/g, '')).min(3, 'O CVV deve possuir entre 3 e 4 dígitos.').max(4, 'O CVV deve possuir entre 3 e 4 dígitos.')\n}).required();","map":{"version":3,"names":["isValidCNPJ","isValidCPF","isValidPhone","default","isValidCreditCard","yup","schema","object","fullName","string","required","min","matches","email","mobile","transform","value","replace","test","document","zipCode","val","street","number","complement","neighborhood","city","state","creditCardNumber","isValid","creditCardHolder","creditCardExpiration","month","year","split","length","Date","toISOString","creditCardSecurityCode","max"],"sources":["D:/React/PedidoOnline/src/pages/Payment/validationSchema.tsx"],"sourcesContent":["import { isValidCNPJ, isValidCPF, isValidPhone } from '@brazilian-utils/brazilian-utils'\nimport { default as isValidCreditCard } from 'card-validator'\nimport * as yup from 'yup'\n\nexport const schema = yup\n  .object({\n    fullName: yup\n      .string()\n      .required('O nome é obrigatório.')\n      .min(3, 'O nome deve ser completo.')\n      .matches(/(\\w.+\\s).+/gi, 'O nome deve conter o sobrenome.'),\n    email: yup.string().required('O email é obrigatório.').email('O email deve ser válido.'),\n    mobile: yup\n      .string()\n      .required('O celular é obrigatório.')\n      .transform((value) => value.replace(/[^\\d]/g, ''))\n      .test('validateMobile', 'O celular inválido.', (value) => isValidPhone(value)),\n    document: yup\n      .string()\n      .required('O CPF/CNPJ é obrigatório.')\n      .transform((value) => value.replace(/[^\\d]/g, ''))\n      .test(\n        'validateDocument',\n        'O CPF/CNPJ é inválido.',\n        (value) => isValidCPF(value) || isValidCNPJ(value),\n      ),\n    zipCode: yup\n      .string()\n      .required('O CEP é obrigatório.')\n      .transform((val) => val.replace(/[^\\d]+/g, '')),\n    street: yup.string().required('O endereço é obrigatório.'),\n    number: yup.string().required('O número é obrigatório.'),\n    complement: yup.string(),\n    neighborhood: yup.string().required('O bairro é obrigatório.'),\n    city: yup.string().required('A cidade é obrigatória.'),\n    state: yup.string().required('O estado é obrigatório.'),\n    creditCardNumber: yup\n      .string()\n      .required('O número do cartão é obrigatório.')\n      .transform((val) => val.replace(/[^\\d]+/g, ''))\n      .test(\n        'validatCreditCardNumber',\n        'O número do cartão é inválido.',\n        (value) => isValidCreditCard.number(value).isValid,\n      ),\n    creditCardHolder: yup\n      .string()\n      .required('O nome do titular é obrigatório.')\n      .min(3, 'O nome do titular deve ser completo.')\n      .matches(/(\\w.+\\s).+/gi, 'O nome do titular deve conter o sobrenome.'),\n    creditCardExpiration: yup\n      .string()\n      .required('A data de validação é obrigatória.')\n      .transform((value) => {\n        const [month, year] = value.split('/')\n\n        if (month && year && month.length === 2 && year.length === 2)\n          return new Date(+`20${year}`, +month - 1, 1).toISOString()\n\n        return value\n      })\n      .test(\n        'validateCreditCardExpiration',\n        'A data de validate é inválida.',\n        (value) => new Date(value) >= new Date(),\n      ),\n    creditCardSecurityCode: yup\n      .string()\n      .required('O CVV é obrigatório.')\n      .transform((value) => value.replace(/[^\\d]+/g, ''))\n      .min(3, 'O CVV deve possuir entre 3 e 4 dígitos.')\n      .max(4, 'O CVV deve possuir entre 3 e 4 dígitos.'),\n  })\n  .required()\n\nexport type FieldValues = yup.InferType<typeof schema>\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,UAAtB,EAAkCC,YAAlC,QAAsD,kCAAtD;AACA,SAASC,OAAO,IAAIC,iBAApB,QAA6C,gBAA7C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAO,MAAMC,MAAM,GAAGD,GAAG,CACtBE,MADmB,CACZ;EACNC,QAAQ,EAAEH,GAAG,CACVI,MADO,GAEPC,QAFO,CAEE,uBAFF,EAGPC,GAHO,CAGH,CAHG,EAGA,2BAHA,EAIPC,OAJO,CAIC,cAJD,EAIiB,iCAJjB,CADJ;EAMNC,KAAK,EAAER,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,wBAAtB,EAAgDG,KAAhD,CAAsD,0BAAtD,CAND;EAONC,MAAM,EAAET,GAAG,CACRI,MADK,GAELC,QAFK,CAEI,0BAFJ,EAGLK,SAHK,CAGMC,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAHhB,EAILC,IAJK,CAIA,gBAJA,EAIkB,qBAJlB,EAI0CF,KAAD,IAAWd,YAAY,CAACc,KAAD,CAJhE,CAPF;EAYNG,QAAQ,EAAEd,GAAG,CACVI,MADO,GAEPC,QAFO,CAEE,2BAFF,EAGPK,SAHO,CAGIC,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAc,QAAd,EAAwB,EAAxB,CAHd,EAIPC,IAJO,CAKN,kBALM,EAMN,wBANM,EAOLF,KAAD,IAAWf,UAAU,CAACe,KAAD,CAAV,IAAqBhB,WAAW,CAACgB,KAAD,CAPrC,CAZJ;EAqBNI,OAAO,EAAEf,GAAG,CACTI,MADM,GAENC,QAFM,CAEG,sBAFH,EAGNK,SAHM,CAGKM,GAAD,IAASA,GAAG,CAACJ,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,CAHb,CArBH;EAyBNK,MAAM,EAAEjB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,2BAAtB,CAzBF;EA0BNa,MAAM,EAAElB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CA1BF;EA2BNc,UAAU,EAAEnB,GAAG,CAACI,MAAJ,EA3BN;EA4BNgB,YAAY,EAAEpB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CA5BR;EA6BNgB,IAAI,EAAErB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CA7BA;EA8BNiB,KAAK,EAAEtB,GAAG,CAACI,MAAJ,GAAaC,QAAb,CAAsB,yBAAtB,CA9BD;EA+BNkB,gBAAgB,EAAEvB,GAAG,CAClBI,MADe,GAEfC,QAFe,CAEN,mCAFM,EAGfK,SAHe,CAGJM,GAAD,IAASA,GAAG,CAACJ,OAAJ,CAAY,SAAZ,EAAuB,EAAvB,CAHJ,EAIfC,IAJe,CAKd,yBALc,EAMd,gCANc,EAObF,KAAD,IAAWZ,iBAAiB,CAACmB,MAAlB,CAAyBP,KAAzB,EAAgCa,OAP7B,CA/BZ;EAwCNC,gBAAgB,EAAEzB,GAAG,CAClBI,MADe,GAEfC,QAFe,CAEN,kCAFM,EAGfC,GAHe,CAGX,CAHW,EAGR,sCAHQ,EAIfC,OAJe,CAIP,cAJO,EAIS,4CAJT,CAxCZ;EA6CNmB,oBAAoB,EAAE1B,GAAG,CACtBI,MADmB,GAEnBC,QAFmB,CAEV,oCAFU,EAGnBK,SAHmB,CAGRC,KAAD,IAAW;IACpB,MAAM,CAACgB,KAAD,EAAQC,IAAR,IAAgBjB,KAAK,CAACkB,KAAN,CAAY,GAAZ,CAAtB;IAEA,IAAIF,KAAK,IAAIC,IAAT,IAAiBD,KAAK,CAACG,MAAN,KAAiB,CAAlC,IAAuCF,IAAI,CAACE,MAAL,KAAgB,CAA3D,EACE,OAAO,IAAIC,IAAJ,CAAS,CAAE,KAAIH,IAAK,EAApB,EAAuB,CAACD,KAAD,GAAS,CAAhC,EAAmC,CAAnC,EAAsCK,WAAtC,EAAP;IAEF,OAAOrB,KAAP;EACD,CAVmB,EAWnBE,IAXmB,CAYlB,8BAZkB,EAalB,gCAbkB,EAcjBF,KAAD,IAAW,IAAIoB,IAAJ,CAASpB,KAAT,KAAmB,IAAIoB,IAAJ,EAdZ,CA7ChB;EA6DNE,sBAAsB,EAAEjC,GAAG,CACxBI,MADqB,GAErBC,QAFqB,CAEZ,sBAFY,EAGrBK,SAHqB,CAGVC,KAAD,IAAWA,KAAK,CAACC,OAAN,CAAc,SAAd,EAAyB,EAAzB,CAHA,EAIrBN,GAJqB,CAIjB,CAJiB,EAId,yCAJc,EAKrB4B,GALqB,CAKjB,CALiB,EAKd,yCALc;AA7DlB,CADY,EAqEnB7B,QArEmB,EAAf"},"metadata":{},"sourceType":"module"}