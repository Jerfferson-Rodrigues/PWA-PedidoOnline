{"ast":null,"code":"import IMask from '../core/holder.js';\n/**\n  Generic element API to use with mask\n  @interface\n*/\n\nclass MaskElement {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** Safely returns selection start */\n  get selectionStart() {\n    let start;\n\n    try {\n      start = this._unsafeSelectionStart;\n    } catch (e) {}\n\n    return start != null ? start : this.value.length;\n  }\n  /** Safely returns selection end */\n\n\n  get selectionEnd() {\n    let end;\n\n    try {\n      end = this._unsafeSelectionEnd;\n    } catch (e) {}\n\n    return end != null ? end : this.value.length;\n  }\n  /** Safely sets element selection */\n\n\n  select(start, end) {\n    if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n\n    try {\n      this._unsafeSelect(start, end);\n    } catch (e) {}\n  }\n  /** Should be overriden in subclasses */\n\n\n  _unsafeSelect(start, end) {}\n  /** Should be overriden in subclasses */\n\n\n  get isActive() {\n    return false;\n  }\n  /** Should be overriden in subclasses */\n\n\n  bindEvents(handlers) {}\n  /** Should be overriden in subclasses */\n\n\n  unbindEvents() {}\n\n}\n\nIMask.MaskElement = MaskElement;\nexport { MaskElement as default };","map":{"version":3,"names":["IMask","MaskElement","selectionStart","start","_unsafeSelectionStart","e","value","length","selectionEnd","end","_unsafeSelectionEnd","select","_unsafeSelect","isActive","bindEvents","handlers","unbindEvents","default"],"sources":["D:/React/PedidoOnline/node_modules/imask/esm/controls/mask-element.js"],"sourcesContent":["import IMask from '../core/holder.js';\n\n/**\n  Generic element API to use with mask\n  @interface\n*/\nclass MaskElement {\n  /** */\n\n  /** */\n\n  /** */\n\n  /** Safely returns selection start */\n  get selectionStart() {\n    let start;\n    try {\n      start = this._unsafeSelectionStart;\n    } catch (e) {}\n    return start != null ? start : this.value.length;\n  }\n\n  /** Safely returns selection end */\n  get selectionEnd() {\n    let end;\n    try {\n      end = this._unsafeSelectionEnd;\n    } catch (e) {}\n    return end != null ? end : this.value.length;\n  }\n\n  /** Safely sets element selection */\n  select(start, end) {\n    if (start == null || end == null || start === this.selectionStart && end === this.selectionEnd) return;\n    try {\n      this._unsafeSelect(start, end);\n    } catch (e) {}\n  }\n\n  /** Should be overriden in subclasses */\n  _unsafeSelect(start, end) {}\n  /** Should be overriden in subclasses */\n  get isActive() {\n    return false;\n  }\n  /** Should be overriden in subclasses */\n  bindEvents(handlers) {}\n  /** Should be overriden in subclasses */\n  unbindEvents() {}\n}\nIMask.MaskElement = MaskElement;\n\nexport { MaskElement as default };\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,mBAAlB;AAEA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,CAAkB;EAChB;;EAEA;;EAEA;;EAEA;EACkB,IAAdC,cAAc,GAAG;IACnB,IAAIC,KAAJ;;IACA,IAAI;MACFA,KAAK,GAAG,KAAKC,qBAAb;IACD,CAFD,CAEE,OAAOC,CAAP,EAAU,CAAE;;IACd,OAAOF,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,KAAKG,KAAL,CAAWC,MAA1C;EACD;EAED;;;EACgB,IAAZC,YAAY,GAAG;IACjB,IAAIC,GAAJ;;IACA,IAAI;MACFA,GAAG,GAAG,KAAKC,mBAAX;IACD,CAFD,CAEE,OAAOL,CAAP,EAAU,CAAE;;IACd,OAAOI,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAKH,KAAL,CAAWC,MAAtC;EACD;EAED;;;EACAI,MAAM,CAACR,KAAD,EAAQM,GAAR,EAAa;IACjB,IAAIN,KAAK,IAAI,IAAT,IAAiBM,GAAG,IAAI,IAAxB,IAAgCN,KAAK,KAAK,KAAKD,cAAf,IAAiCO,GAAG,KAAK,KAAKD,YAAlF,EAAgG;;IAChG,IAAI;MACF,KAAKI,aAAL,CAAmBT,KAAnB,EAA0BM,GAA1B;IACD,CAFD,CAEE,OAAOJ,CAAP,EAAU,CAAE;EACf;EAED;;;EACAO,aAAa,CAACT,KAAD,EAAQM,GAAR,EAAa,CAAE;EAC5B;;;EACY,IAARI,QAAQ,GAAG;IACb,OAAO,KAAP;EACD;EACD;;;EACAC,UAAU,CAACC,QAAD,EAAW,CAAE;EACvB;;;EACAC,YAAY,GAAG,CAAE;;AA1CD;;AA4ClBhB,KAAK,CAACC,WAAN,GAAoBA,WAApB;AAEA,SAASA,WAAW,IAAIgB,OAAxB"},"metadata":{},"sourceType":"module"}