{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar cardTypes = require(\"./lib/card-types\");\n\nvar add_matching_cards_to_results_1 = require(\"./lib/add-matching-cards-to-results\");\n\nvar is_valid_input_type_1 = require(\"./lib/is-valid-input-type\");\n\nvar find_best_match_1 = require(\"./lib/find-best-match\");\n\nvar clone_1 = require(\"./lib/clone\");\n\nvar customCards = {};\nvar cardNames = {\n  VISA: \"visa\",\n  MASTERCARD: \"mastercard\",\n  AMERICAN_EXPRESS: \"american-express\",\n  DINERS_CLUB: \"diners-club\",\n  DISCOVER: \"discover\",\n  JCB: \"jcb\",\n  UNIONPAY: \"unionpay\",\n  MAESTRO: \"maestro\",\n  ELO: \"elo\",\n  MIR: \"mir\",\n  HIPER: \"hiper\",\n  HIPERCARD: \"hipercard\"\n};\nvar ORIGINAL_TEST_ORDER = [cardNames.VISA, cardNames.MASTERCARD, cardNames.AMERICAN_EXPRESS, cardNames.DINERS_CLUB, cardNames.DISCOVER, cardNames.JCB, cardNames.UNIONPAY, cardNames.MAESTRO, cardNames.ELO, cardNames.MIR, cardNames.HIPER, cardNames.HIPERCARD];\nvar testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\n\nfunction findType(cardType) {\n  return customCards[cardType] || cardTypes[cardType];\n}\n\nfunction getAllCardTypes() {\n  return testOrder.map(function (cardType) {\n    return clone_1.clone(findType(cardType));\n  });\n}\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  if (ignoreErrorForNotExisting === void 0) {\n    ignoreErrorForNotExisting = false;\n  }\n\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\nfunction creditCardType(cardNumber) {\n  var results = [];\n\n  if (!is_valid_input_type_1.isValidInputType(cardNumber)) {\n    return results;\n  }\n\n  if (cardNumber.length === 0) {\n    return getAllCardTypes();\n  }\n\n  testOrder.forEach(function (cardType) {\n    var cardConfiguration = findType(cardType);\n    add_matching_cards_to_results_1.addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n  });\n  var bestMatch = find_best_match_1.findBestMatch(results);\n\n  if (bestMatch) {\n    return [bestMatch];\n  }\n\n  return results;\n}\n\ncreditCardType.getTypeInfo = function (cardType) {\n  return clone_1.clone(findType(cardType));\n};\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.updateCard = function (cardType, updates) {\n  var originalObject = customCards[cardType] || cardTypes[cardType];\n\n  if (!originalObject) {\n    throw new Error(\"\\\"\" + cardType + \"\\\" is not a recognized type. Use `addCard` instead.'\");\n  }\n\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error(\"Cannot overwrite type parameter.\");\n  }\n\n  var clonedCard = clone_1.clone(originalObject);\n  clonedCard = __assign(__assign({}, clonedCard), updates);\n  customCards[clonedCard.type] = clonedCard;\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = cardNames;\nmodule.exports = creditCardType;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","cardTypes","require","add_matching_cards_to_results_1","is_valid_input_type_1","find_best_match_1","clone_1","customCards","cardNames","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","JCB","UNIONPAY","MAESTRO","ELO","MIR","HIPER","HIPERCARD","ORIGINAL_TEST_ORDER","testOrder","clone","findType","cardType","getAllCardTypes","map","getCardPosition","name","ignoreErrorForNotExisting","position","indexOf","Error","creditCardType","cardNumber","results","isValidInputType","forEach","cardConfiguration","addMatchingCardsToResults","bestMatch","findBestMatch","getTypeInfo","removeCard","splice","addCard","config","existingCardPosition","type","push","updateCard","updates","originalObject","clonedCard","changeOrder","currentPosition","resetModifications","types","module","exports"],"sources":["D:/React/PedidoOnline/node_modules/credit-card-type/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar cardTypes = require(\"./lib/card-types\");\nvar add_matching_cards_to_results_1 = require(\"./lib/add-matching-cards-to-results\");\nvar is_valid_input_type_1 = require(\"./lib/is-valid-input-type\");\nvar find_best_match_1 = require(\"./lib/find-best-match\");\nvar clone_1 = require(\"./lib/clone\");\nvar customCards = {};\nvar cardNames = {\n    VISA: \"visa\",\n    MASTERCARD: \"mastercard\",\n    AMERICAN_EXPRESS: \"american-express\",\n    DINERS_CLUB: \"diners-club\",\n    DISCOVER: \"discover\",\n    JCB: \"jcb\",\n    UNIONPAY: \"unionpay\",\n    MAESTRO: \"maestro\",\n    ELO: \"elo\",\n    MIR: \"mir\",\n    HIPER: \"hiper\",\n    HIPERCARD: \"hipercard\",\n};\nvar ORIGINAL_TEST_ORDER = [\n    cardNames.VISA,\n    cardNames.MASTERCARD,\n    cardNames.AMERICAN_EXPRESS,\n    cardNames.DINERS_CLUB,\n    cardNames.DISCOVER,\n    cardNames.JCB,\n    cardNames.UNIONPAY,\n    cardNames.MAESTRO,\n    cardNames.ELO,\n    cardNames.MIR,\n    cardNames.HIPER,\n    cardNames.HIPERCARD,\n];\nvar testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\nfunction findType(cardType) {\n    return customCards[cardType] || cardTypes[cardType];\n}\nfunction getAllCardTypes() {\n    return testOrder.map(function (cardType) { return clone_1.clone(findType(cardType)); });\n}\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n    if (ignoreErrorForNotExisting === void 0) { ignoreErrorForNotExisting = false; }\n    var position = testOrder.indexOf(name);\n    if (!ignoreErrorForNotExisting && position === -1) {\n        throw new Error('\"' + name + '\" is not a supported card type.');\n    }\n    return position;\n}\nfunction creditCardType(cardNumber) {\n    var results = [];\n    if (!is_valid_input_type_1.isValidInputType(cardNumber)) {\n        return results;\n    }\n    if (cardNumber.length === 0) {\n        return getAllCardTypes();\n    }\n    testOrder.forEach(function (cardType) {\n        var cardConfiguration = findType(cardType);\n        add_matching_cards_to_results_1.addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n    });\n    var bestMatch = find_best_match_1.findBestMatch(results);\n    if (bestMatch) {\n        return [bestMatch];\n    }\n    return results;\n}\ncreditCardType.getTypeInfo = function (cardType) {\n    return clone_1.clone(findType(cardType));\n};\ncreditCardType.removeCard = function (name) {\n    var position = getCardPosition(name);\n    testOrder.splice(position, 1);\n};\ncreditCardType.addCard = function (config) {\n    var existingCardPosition = getCardPosition(config.type, true);\n    customCards[config.type] = config;\n    if (existingCardPosition === -1) {\n        testOrder.push(config.type);\n    }\n};\ncreditCardType.updateCard = function (cardType, updates) {\n    var originalObject = customCards[cardType] || cardTypes[cardType];\n    if (!originalObject) {\n        throw new Error(\"\\\"\" + cardType + \"\\\" is not a recognized type. Use `addCard` instead.'\");\n    }\n    if (updates.type && originalObject.type !== updates.type) {\n        throw new Error(\"Cannot overwrite type parameter.\");\n    }\n    var clonedCard = clone_1.clone(originalObject);\n    clonedCard = __assign(__assign({}, clonedCard), updates);\n    customCards[clonedCard.type] = clonedCard;\n};\ncreditCardType.changeOrder = function (name, position) {\n    var currentPosition = getCardPosition(name);\n    testOrder.splice(currentPosition, 1);\n    testOrder.splice(position, 0, name);\n};\ncreditCardType.resetModifications = function () {\n    testOrder = clone_1.clone(ORIGINAL_TEST_ORDER);\n    customCards = {};\n};\ncreditCardType.types = cardNames;\nmodule.exports = creditCardType;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}