{"ast":null,"code":"import MaskElement from './mask-element.js';\nimport IMask from '../core/holder.js';\n/** Bridge between HTMLElement and {@link Masked} */\n\nclass HTMLMaskElement extends MaskElement {\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\n    @param {HTMLInputElement|HTMLTextAreaElement} input\n  */\n  constructor(input) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n\n\n  get rootElement() {\n    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n\n    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) === null || _this$input$getRootNo2 === void 0 ? void 0 : _this$input$getRootNo2.call(_this$input)) !== null && _this$input$getRootNo !== void 0 ? _this$input$getRootNo : document;\n  }\n  /**\n    Is element in focus\n    @readonly\n  */\n\n\n  get isActive() {\n    //$FlowFixMe\n    return this.input === this.rootElement.activeElement;\n  }\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n\n\n  get _unsafeSelectionStart() {\n    return this.input.selectionStart;\n  }\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n\n\n  get _unsafeSelectionEnd() {\n    return this.input.selectionEnd;\n  }\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n\n\n  _unsafeSelect(start, end) {\n    this.input.setSelectionRange(start, end);\n  }\n  /**\n    HTMLElement value\n    @override\n  */\n\n\n  get value() {\n    return this.input.value;\n  }\n\n  set value(value) {\n    this.input.value = value;\n  }\n  /**\n    Binds HTMLElement events to mask internal events\n    @override\n  */\n\n\n  bindEvents(handlers) {\n    Object.keys(handlers).forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n  /**\n    Unbinds HTMLElement events to mask internal events\n    @override\n  */\n\n\n  unbindEvents() {\n    Object.keys(this._handlers).forEach(event => this._toggleEventHandler(event));\n  }\n  /** */\n\n\n  _toggleEventHandler(event, handler) {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n\n}\n\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\nexport { HTMLMaskElement as default };","map":{"version":3,"names":["MaskElement","IMask","HTMLMaskElement","constructor","input","_handlers","rootElement","_this$input$getRootNo","_this$input$getRootNo2","_this$input","getRootNode","call","document","isActive","activeElement","_unsafeSelectionStart","selectionStart","_unsafeSelectionEnd","selectionEnd","_unsafeSelect","start","end","setSelectionRange","value","bindEvents","handlers","Object","keys","forEach","event","_toggleEventHandler","EVENTS_MAP","unbindEvents","handler","removeEventListener","addEventListener","selectionChange","drop","click","focus","commit","default"],"sources":["D:/React/PedidoOnline/node_modules/imask/esm/controls/html-mask-element.js"],"sourcesContent":["import MaskElement from './mask-element.js';\nimport IMask from '../core/holder.js';\n\n/** Bridge between HTMLElement and {@link Masked} */\nclass HTMLMaskElement extends MaskElement {\n  /** Mapping between HTMLElement events and mask internal events */\n\n  /** HTMLElement to use mask on */\n\n  /**\n    @param {HTMLInputElement|HTMLTextAreaElement} input\n  */\n  constructor(input) {\n    super();\n    this.input = input;\n    this._handlers = {};\n  }\n\n  /** */\n  // $FlowFixMe https://github.com/facebook/flow/issues/2839\n  get rootElement() {\n    var _this$input$getRootNo, _this$input$getRootNo2, _this$input;\n    return (_this$input$getRootNo = (_this$input$getRootNo2 = (_this$input = this.input).getRootNode) === null || _this$input$getRootNo2 === void 0 ? void 0 : _this$input$getRootNo2.call(_this$input)) !== null && _this$input$getRootNo !== void 0 ? _this$input$getRootNo : document;\n  }\n\n  /**\n    Is element in focus\n    @readonly\n  */\n  get isActive() {\n    //$FlowFixMe\n    return this.input === this.rootElement.activeElement;\n  }\n\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    return this.input.selectionStart;\n  }\n\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n  get _unsafeSelectionEnd() {\n    return this.input.selectionEnd;\n  }\n\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n  _unsafeSelect(start, end) {\n    this.input.setSelectionRange(start, end);\n  }\n\n  /**\n    HTMLElement value\n    @override\n  */\n  get value() {\n    return this.input.value;\n  }\n  set value(value) {\n    this.input.value = value;\n  }\n\n  /**\n    Binds HTMLElement events to mask internal events\n    @override\n  */\n  bindEvents(handlers) {\n    Object.keys(handlers).forEach(event => this._toggleEventHandler(HTMLMaskElement.EVENTS_MAP[event], handlers[event]));\n  }\n\n  /**\n    Unbinds HTMLElement events to mask internal events\n    @override\n  */\n  unbindEvents() {\n    Object.keys(this._handlers).forEach(event => this._toggleEventHandler(event));\n  }\n\n  /** */\n  _toggleEventHandler(event, handler) {\n    if (this._handlers[event]) {\n      this.input.removeEventListener(event, this._handlers[event]);\n      delete this._handlers[event];\n    }\n    if (handler) {\n      this.input.addEventListener(event, handler);\n      this._handlers[event] = handler;\n    }\n  }\n}\nHTMLMaskElement.EVENTS_MAP = {\n  selectionChange: 'keydown',\n  input: 'input',\n  drop: 'drop',\n  click: 'click',\n  focus: 'focus',\n  commit: 'blur'\n};\nIMask.HTMLMaskElement = HTMLMaskElement;\n\nexport { HTMLMaskElement as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}