{"ast":null,"code":"import HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\n\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n\n    return focusOffset;\n  }\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n\n\n  get _unsafeSelectionEnd() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n\n    return focusOffset;\n  }\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n\n\n  _unsafeSelect(start, end) {\n    if (!this.rootElement.createRange) return;\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n  /**\n    HTMLElement value\n    @override\n  */\n\n\n  get value() {\n    // $FlowFixMe\n    return this.input.textContent;\n  }\n\n  set value(value) {\n    this.input.textContent = value;\n  }\n\n}\n\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\nexport { HTMLContenteditableMaskElement as default };","map":{"version":3,"names":["HTMLMaskElement","IMask","HTMLContenteditableMaskElement","_unsafeSelectionStart","root","rootElement","selection","getSelection","anchorOffset","focusOffset","_unsafeSelectionEnd","_unsafeSelect","start","end","createRange","range","setStart","input","firstChild","setEnd","lastChild","removeAllRanges","addRange","value","textContent","default"],"sources":["D:/React/PedidoOnline/node_modules/imask/esm/controls/html-contenteditable-mask-element.js"],"sourcesContent":["import HTMLMaskElement from './html-mask-element.js';\nimport IMask from '../core/holder.js';\nimport './mask-element.js';\n\nclass HTMLContenteditableMaskElement extends HTMLMaskElement {\n  /**\n    Returns HTMLElement selection start\n    @override\n  */\n  get _unsafeSelectionStart() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset < focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Returns HTMLElement selection end\n    @override\n  */\n  get _unsafeSelectionEnd() {\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    const anchorOffset = selection && selection.anchorOffset;\n    const focusOffset = selection && selection.focusOffset;\n    if (focusOffset == null || anchorOffset == null || anchorOffset > focusOffset) {\n      return anchorOffset;\n    }\n    return focusOffset;\n  }\n\n  /**\n    Sets HTMLElement selection\n    @override\n  */\n  _unsafeSelect(start, end) {\n    if (!this.rootElement.createRange) return;\n    const range = this.rootElement.createRange();\n    range.setStart(this.input.firstChild || this.input, start);\n    range.setEnd(this.input.lastChild || this.input, end);\n    const root = this.rootElement;\n    const selection = root.getSelection && root.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(range);\n    }\n  }\n\n  /**\n    HTMLElement value\n    @override\n  */\n  get value() {\n    // $FlowFixMe\n    return this.input.textContent;\n  }\n  set value(value) {\n    this.input.textContent = value;\n  }\n}\nIMask.HTMLContenteditableMaskElement = HTMLContenteditableMaskElement;\n\nexport { HTMLContenteditableMaskElement as default };\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,wBAA5B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,mBAAP;;AAEA,MAAMC,8BAAN,SAA6CF,eAA7C,CAA6D;EAC3D;AACF;AACA;AACA;EAC2B,IAArBG,qBAAqB,GAAG;IAC1B,MAAMC,IAAI,GAAG,KAAKC,WAAlB;IACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,YAAL,IAAqBH,IAAI,CAACG,YAAL,EAAvC;IACA,MAAMC,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACE,YAA5C;IACA,MAAMC,WAAW,GAAGH,SAAS,IAAIA,SAAS,CAACG,WAA3C;;IACA,IAAIA,WAAW,IAAI,IAAf,IAAuBD,YAAY,IAAI,IAAvC,IAA+CA,YAAY,GAAGC,WAAlE,EAA+E;MAC7E,OAAOD,YAAP;IACD;;IACD,OAAOC,WAAP;EACD;EAED;AACF;AACA;AACA;;;EACyB,IAAnBC,mBAAmB,GAAG;IACxB,MAAMN,IAAI,GAAG,KAAKC,WAAlB;IACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,YAAL,IAAqBH,IAAI,CAACG,YAAL,EAAvC;IACA,MAAMC,YAAY,GAAGF,SAAS,IAAIA,SAAS,CAACE,YAA5C;IACA,MAAMC,WAAW,GAAGH,SAAS,IAAIA,SAAS,CAACG,WAA3C;;IACA,IAAIA,WAAW,IAAI,IAAf,IAAuBD,YAAY,IAAI,IAAvC,IAA+CA,YAAY,GAAGC,WAAlE,EAA+E;MAC7E,OAAOD,YAAP;IACD;;IACD,OAAOC,WAAP;EACD;EAED;AACF;AACA;AACA;;;EACEE,aAAa,CAACC,KAAD,EAAQC,GAAR,EAAa;IACxB,IAAI,CAAC,KAAKR,WAAL,CAAiBS,WAAtB,EAAmC;IACnC,MAAMC,KAAK,GAAG,KAAKV,WAAL,CAAiBS,WAAjB,EAAd;IACAC,KAAK,CAACC,QAAN,CAAe,KAAKC,KAAL,CAAWC,UAAX,IAAyB,KAAKD,KAA7C,EAAoDL,KAApD;IACAG,KAAK,CAACI,MAAN,CAAa,KAAKF,KAAL,CAAWG,SAAX,IAAwB,KAAKH,KAA1C,EAAiDJ,GAAjD;IACA,MAAMT,IAAI,GAAG,KAAKC,WAAlB;IACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,YAAL,IAAqBH,IAAI,CAACG,YAAL,EAAvC;;IACA,IAAID,SAAJ,EAAe;MACbA,SAAS,CAACe,eAAV;MACAf,SAAS,CAACgB,QAAV,CAAmBP,KAAnB;IACD;EACF;EAED;AACF;AACA;AACA;;;EACW,IAALQ,KAAK,GAAG;IACV;IACA,OAAO,KAAKN,KAAL,CAAWO,WAAlB;EACD;;EACQ,IAALD,KAAK,CAACA,KAAD,EAAQ;IACf,KAAKN,KAAL,CAAWO,WAAX,GAAyBD,KAAzB;EACD;;AA1D0D;;AA4D7DtB,KAAK,CAACC,8BAAN,GAAuCA,8BAAvC;AAEA,SAASA,8BAA8B,IAAIuB,OAA3C"},"metadata":{},"sourceType":"module"}